// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model UserProfile {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  email              String     @unique // 유저ID(이메일)
  nickname           String     // 유저닉네임
  position           Position?  // 직무
  affiliation        Affiliation?  // 소속
  interests          Interest[]  // 관심 분야 (기술 스택)
  bio                String?    // 자기소개
  // profile_image_url  String?    // 프로필 이미지
  profile_image_index Int
  like_post          String[]   // 관심 포스트 리스트
  created_at         DateTime   @default(now()) // 생성시간
  updated_at         DateTime   @updatedAt // 수정시간

  // UserLogin과의 관계 설정 (1:1)
  user_login         UserLogin? @relation("UserLoginRelation")

  // Post와의 관계 설정(1:N)
  posts              Post[]     @relation("UserPosts")
}

model UserLogin {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  email              String     @unique // UserProfile과 동일한 ID 사용
  password           String     // 비밀번호
  is_first_login     Boolean    @default(true) // 첫 로그인 여부
  last_logined_at    DateTime?  // 마지막 로그인 시간
  login_fail_count   Int        @default(0) // 로그인 실패 횟수

  // UserProfile과의 관계 설정 (1:1)
  user_profile       UserProfile @relation("UserLoginRelation", fields: [email], references: [email])
}


model Post {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId // Post ID
  type              PostType  // 게시글 타입: [프로젝트, 스터디, 모임]
  user_id           String   @db.ObjectId // 작성자ID(userProfile의 id와 동일 타입)
  title             String   // 게시글 제목
  content           String   // 게시글 내용
  interests         Interest[]  // 구하는 기술 스택
  position          Position[]  // 구하는 직무
  participation_method ParticipationMethod // 진행방법
  created_at        DateTime @default(now()) // 생성시간
  updated_at        DateTime @updatedAt // 수정시간

  // Project Type, Study Type
  recruitment_capacity Int?  // 모집 인원
  duration          Duration?  // 예상 기간
  recruitment_deadline DateTime? // 모집 마감일

  // Meet Type
  affiliation       Affiliation?  // 소속: [학생, 직장인, 프리랜서, 취업 준비생]
  available_time    AvailableTime?  // 가능한 시간대

  // UserProfile과의 관계 설정(N:1)
  user_profile      UserProfile @relation("UserPosts", fields: [user_id], references: [id])
}

model Notification {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String   // 유저ID
  post_id           String  // 포스트ID
  is_read           Boolean  @default(false) // 알림 읽음 여부
  created_at        DateTime @default(now()) // 생성 시간
}

model Chat {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  chat_id           String   // 채팅ID
  sender            String   // 보낸 사람
  receiver          String   // 받는 사람
  msg               String   // 메시지 내용
  is_read           Boolean  @default(false) // 메시지 읽음 여부
  created_at        DateTime @default(now()) // 생성 시간
}

model ChatRoom {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at        DateTime @default(now()) // 생성시간
}

model ChatJoin {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String   // 유저ID
  room_id           String   // 방ID
  joined_at         DateTime @default(now()) // 참가시간
}

model File {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  file_id           String   // 파일ID
  post_id           String?  // 게시글ID
  file_url          String   // 파일 경로
  created_at        DateTime @default(now()) // 생성시간
}


// enum type 정의

enum Position {
  FRONTEND
  BACKEND
  FULLSTACK
  IOS
  ANDROID
  DEVOPS
  PM
  MARKETER
  DESIGNER
  PLANNER
}

enum Affiliation {
  STUDENT
  EMPLOYEE
  FREELANCER
  JOBSEEKER
}

enum Interest {
  UNDETERMINED
  TYPESCRIPT
  JAVASCRIPT
  SWIFT
  FLUTTER
  VUE
  NEXT_JS
  SVELTE
  PHP
  MONGO_DB
  GO
  SPRING
  NEST_JS
  KIBANA
  POSTGRESQL
  PYTHON
  GRAPHQL
  MYSQL
  REACT_JS
  REACT_NATIVE
  JEST
  GIT
  DOCKER
  GITHUB
  KUBERNETES
  FIGMA
  NODE_JS
  DJANGO
  JAVA
  FIREBASE
  AWS
  GITLAB
}

enum ParticipationMethod {
  ALL
  ONLINE
  OFFLINE
  HYBRID
}

enum Duration {
  UNDETERMINED
  ONE_MONTH
  TWO_MONTH
  THREE_MONTH
  FOUR_MONTH
  FIVE_MONTH
  SIX_MONTH
  LONG_TERM
}

enum PostType {
  PROJECT
  STUDY
  MEET
}

enum AvailableTime {
  LESS_THAN_5
  MORE_THAN_5
  MORE_THAN_10
  MORE_THAN_20
  MORE_THAN_40
}